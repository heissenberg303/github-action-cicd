# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml


variables:
  IMAGE_NAME: heissenberg/covid-app
  IMAGE_TAG: golang-app-1.0
  SECURE_LOG_LEVEL: 'debug'


stages: 
  - build         # List of stages for jobs, and their order of execution
  - test
  # - deploy to k8s cluster

include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  # - template: Security/DAST.gitlab-ci.yml

build_image:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG

code_quality:
  stage: test
  artifacts:
    paths: [gl-code-quality-report.json]

sast:
  stage: test
  variables:
    CI_DEBUG_TRACE: "true"
  artifacts:
    reports:
      sast: gl-sast-report.json

container_scanning:
  stage: test
  variables:
    CS_IMAGE: $IMAGE_NAME:$IMAGE_TAG
  

run_tests:
  stage: test
  image: golang:1.20
  before_script:
      - apt-get update && apt-get install make
  script:
      - make test

